From eafea24da89ad2f1ab2a1b1bf962613685a918c1 Mon Sep 17 00:00:00 2001
From: LIU Hao <lh_mouse@126.com>
Date: Fri, 7 Oct 2022 22:42:04 +0800
Subject: [PATCH 9003/9004] crt: Implement standard-conforming termination
 support with mcfgthread

This commit implements these functions in accordance with the ISO C
standard and the Itanium C++ ABI (except for `atexit()` which behaves
in a per-module way like its old behavior, and also on Linux):

  * `atexit()`, C89
  * `exit()`, C89
  * `__cxa_atexit()`, Itanium C++ ABI
  * `_exit()`, POSIX
  * `_Exit()`, C99
  * `at_quick_exit()`, C99
  * `quick_exit()`, C99
  * `__cxa_at_quick_exit()`, GNU extension

Implementation details:

  1. An object with the name `__dso_handle` is defined for each
     module (EXE or DLL).
  2. Per-module cleanup callbacks should be registered with
     `__MCF_cxa_atexit()` or `__MCF_cxa_at_quick_exit()`, passing
     `&__dso_handle` as its third argument.
  3. When a process calls `exit()` or returns from `main()`,
     `__MCF_cxa_finalize(NULL)` is called, which executes all
     callbacks registered with `__MCF_cxa_atexit()` in reverse
     order.
  4. When a DLL is unloaded neither by calling `exit()` nor by
     returning from `main()` (in other words, by `FreeLibrary()`),
     `__MCF_cxa_finalize(&__dso_handle)`, which executes all
     callbacks registered with `__MCF_cxa_atexit()` with the same
     DSO handle in reverse order. Callbacks that have been
     registered with `__MCF_cxa_at_quick_exit()` are deleted.
  5. All standard I/O streams are flushed before the process
     terminates.

Signed-off-by: LIU Hao <lh_mouse@126.com>
---
 mingw-w64-crt/Makefile.am                     |  2 +-
 mingw-w64-crt/crt/crtdll.c                    | 29 ++++++++++-
 mingw-w64-crt/crt/crtexe.c                    | 14 +++++
 mingw-w64-crt/crt/exit_wrappers.c             | 51 +++++++++++++++++++
 mingw-w64-crt/crt/tls_atexit.c                | 30 +++++++++--
 mingw-w64-crt/crt/ucrt_exit_wrappers.c        | 38 ++++++++++++++
 .../api-ms-win-crt-runtime-l1-1-0.def.in      |  8 +--
 mingw-w64-crt/lib-common/msvcr120_app.def.in  |  4 +-
 mingw-w64-crt/lib-common/msvcrt.def.in        |  4 +-
 .../lib-common/ucrtbase-common.def.in         |  8 +--
 mingw-w64-crt/lib32/crtdll.def.in             |  4 +-
 mingw-w64-crt/lib32/msvcr100.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcr100d.def.in          |  4 +-
 mingw-w64-crt/lib32/msvcr110.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcr110d.def.in          |  4 +-
 mingw-w64-crt/lib32/msvcr120.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcr120d.def.in          |  4 +-
 mingw-w64-crt/lib32/msvcr40d.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcr70.def.in            |  4 +-
 mingw-w64-crt/lib32/msvcr70d.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcr71.def.in            |  4 +-
 mingw-w64-crt/lib32/msvcr71d.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcr80.def.in            |  4 +-
 mingw-w64-crt/lib32/msvcr80d.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcr90.def.in            |  4 +-
 mingw-w64-crt/lib32/msvcr90d.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcrt10.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcrt20.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcrt40.def.in           |  4 +-
 mingw-w64-crt/lib32/msvcrtd.def.in            |  4 +-
 mingw-w64-crt/lib64/msvcr100.def.in           |  4 +-
 mingw-w64-crt/lib64/msvcr100d.def.in          |  4 +-
 mingw-w64-crt/lib64/msvcr110.def.in           |  4 +-
 mingw-w64-crt/lib64/msvcr110d.def.in          |  4 +-
 mingw-w64-crt/lib64/msvcr120.def.in           |  4 +-
 mingw-w64-crt/lib64/msvcr120d.def.in          |  4 +-
 mingw-w64-crt/lib64/msvcr80.def.in            |  4 +-
 mingw-w64-crt/lib64/msvcr80d.def.in           |  4 +-
 mingw-w64-crt/lib64/msvcr90.def.in            |  4 +-
 mingw-w64-crt/lib64/msvcr90d.def.in           |  4 +-
 mingw-w64-crt/libarm32/kernelbase.def         |  4 +-
 mingw-w64-crt/libarm32/msvcr110.def.in        |  4 +-
 mingw-w64-crt/libarm32/msvcr110d.def.in       |  4 +-
 mingw-w64-crt/libarm32/msvcr120.def.in        |  4 +-
 mingw-w64-crt/libarm32/msvcr120d.def.in       |  4 +-
 mingw-w64-crt/misc/ucrt_at_quick_exit.c       |  3 ++
 mingw-w64-crt/misc/ucrt_compat.c              |  4 +-
 47 files changed, 245 insertions(+), 90 deletions(-)
 create mode 100644 mingw-w64-crt/crt/exit_wrappers.c
 create mode 100644 mingw-w64-crt/crt/ucrt_exit_wrappers.c

diff --git a/mingw-w64-crt/Makefile.am b/mingw-w64-crt/Makefile.am
index d497fa76b..a0bd0c7ee 100644
--- a/mingw-w64-crt/Makefile.am
+++ b/mingw-w64-crt/Makefile.am
@@ -117,7 +117,7 @@ src_libmingw32=include/oscalls.h include/internal.h include/sect_attribs.h \
   crt/usermatherr.c   \
   crt/xtxtmode.c      crt/crt_handler.c    \
   crt/tlsthrd.c       crt/tlsmthread.c     crt/tlsmcrt.c   \
-  crt/cxa_atexit.c    crt/cxa_thread_atexit.c crt/tls_atexit.c
+  crt/cxa_atexit.c    crt/cxa_thread_atexit.c   crt/tls_atexit.c   crt/exit_wrappers.c   crt/ucrt_exit_wrappers.c
 
 src_libscrnsave=libsrc/scrnsave.c
 src_libscrnsavw=libsrc/scrnsave.c
diff --git a/mingw-w64-crt/crt/crtdll.c b/mingw-w64-crt/crt/crtdll.c
index d08d2a81f..fbd87a9c5 100644
--- a/mingw-w64-crt/crt/crtdll.c
+++ b/mingw-w64-crt/crt/crtdll.c
@@ -31,6 +31,12 @@
 #endif
 #include <sect_attribs.h>
 #include <locale.h>
+#include <stdio.h>
+#ifdef __USING_MCFGTHREAD__
+#include <mcfgthread/cxa.h>
+#endif
+
+extern HANDLE __dso_handle;
 
 extern void __cdecl _initterm(_PVFV *,_PVFV *);
 extern void __main ();
@@ -182,7 +188,14 @@ __DllMainCRTStartup (HANDLE hDllHandle, DWORD dwReason, LPVOID lpreserved)
 	  }
     }
   if (dwReason == DLL_PROCESS_ATTACH)
-    __main ();
+    {
+#ifdef __USING_MCFGTHREAD__
+      /* Register `fflush(NULL)` before user-defined constructors, so
+       * it will be executed after all user-defined destructors.  */
+      __MCF_cxa_atexit ((__MCF_cxa_dtor_cdecl*)(intptr_t) fflush, NULL, &__dso_handle);
+#endif
+      __main ();
+    }
   retcode = DllMain(hDllHandle,dwReason,lpreserved);
   if (dwReason == DLL_PROCESS_ATTACH && ! retcode)
     {
@@ -196,6 +209,16 @@ __DllMainCRTStartup (HANDLE hDllHandle, DWORD dwReason, LPVOID lpreserved)
 	if (_CRT_INIT (hDllHandle, dwReason, lpreserved) == FALSE)
 	  retcode = FALSE;
     }
+#ifdef __USING_MCFGTHREAD__
+  if (dwReason == DLL_PROCESS_DETACH && lpreserved == NULL)
+    {
+      /* Call `__cxa_finalize(dso_handle)` if the library is unloaded
+       * dynamically. This conforms to the Itanium C++ ABI. Note it is
+       * not called in case of process termination, where a call to
+       * `__cxa_finalize(NULL)` shall have been made instead.  */
+      __MCF_cxa_finalize (&__dso_handle);
+    }
+#endif
 i__leave:
   __native_dllmain_reason = UINT_MAX;
   return retcode ;
@@ -204,9 +227,13 @@ i__leave:
 
 int __cdecl atexit (_PVFV func)
 {
+#ifdef __USING_MCFGTHREAD__
+    return __MCF_cxa_atexit ((__MCF_cxa_dtor_cdecl*)(intptr_t) func, NULL, &__dso_handle);
+#else
     /* Do not use msvcrt's atexit() or UCRT's _crt_atexit() function as it
      * cannot be called from DLL library which may be unloaded at runtime. */
     return _register_onexit_function(&atexit_table, (_onexit_t)func);
+#endif
 }
 
 char __mingw_module_is_dll = 1;
diff --git a/mingw-w64-crt/crt/crtexe.c b/mingw-w64-crt/crt/crtexe.c
index cdf5dcd25..c8bddb1af 100644
--- a/mingw-w64-crt/crt/crtexe.c
+++ b/mingw-w64-crt/crt/crtexe.c
@@ -21,6 +21,10 @@
 #include <sect_attribs.h>
 #include <locale.h>
 #include <corecrt_startup.h>
+#include <stdio.h>
+#ifdef __USING_MCFGTHREAD__
+#include <mcfgthread/cxa.h>
+#endif
 
 #if defined(__SEH__) && (!defined(__clang__) || __clang_major__ >= 7)
 #define SEH_INLINE_ASM
@@ -37,6 +41,7 @@ extern int _fmode;
 #undef _commode
 extern int _commode;
 extern int _dowildcard;
+extern HANDLE __dso_handle;
 
 extern _CRTIMP void __cdecl _initterm(_PVFV *, _PVFV *);
 
@@ -250,6 +255,11 @@ __tmainCRTStartup (void)
     _fpreset ();
 
     duplicate_ppstrings (argc, &argv);
+#ifdef __USING_MCFGTHREAD__
+    /* Register `fflush(NULL)` before user-defined constructors, so
+     * it will be executed after all user-defined destructors.  */
+    __MCF_cxa_atexit ((__MCF_cxa_dtor_cdecl*)(intptr_t) fflush, NULL, &__dso_handle);
+#endif
     __main (); /* C++ initialization. */
 #ifdef _UNICODE
     __winitenv = envp;
@@ -326,12 +336,16 @@ static void duplicate_ppstrings (int ac, _TCHAR ***av)
 
 int __cdecl atexit (_PVFV func)
 {
+#ifdef __USING_MCFGTHREAD__
+    return __MCF_cxa_atexit ((__MCF_cxa_dtor_cdecl*)(intptr_t) func, NULL, &__dso_handle);
+#else
     /*
      * msvcrt def file renames the real atexit() function to _crt_atexit().
      * UCRT provides atexit() function only under name _crt_atexit().
      * So redirect call to _crt_atexit() function.
      */
     return _crt_atexit(func);
+#endif
 }
 
 char __mingw_module_is_dll = 0;
diff --git a/mingw-w64-crt/crt/exit_wrappers.c b/mingw-w64-crt/crt/exit_wrappers.c
new file mode 100644
index 000000000..ab6896f96
--- /dev/null
+++ b/mingw-w64-crt/crt/exit_wrappers.c
@@ -0,0 +1,51 @@
+/**
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER.PD within this package.
+ */
+
+#include <_mingw.h>
+#ifdef __USING_MCFGTHREAD__
+#include <mcfgthread/exit.h>
+#include <mcfgthread/cxa.h>
+#endif
+
+/* `exit()`, C89  */
+void exit(int status) __attribute__((__noreturn__));
+extern void (*__MINGW_IMP_SYMBOL(exit))(int) __attribute__((__noreturn__));
+
+void exit(int status)
+{
+#ifdef __USING_MCFGTHREAD__
+  __MCF_exit(status);
+#else
+  (*__MINGW_IMP_SYMBOL(exit))(status);
+#endif
+}
+
+/* `_exit()`, POSIX  */
+void _exit(int status) __attribute__((__noreturn__));
+extern void (*__MINGW_IMP_SYMBOL(_exit))(int) __attribute__((__noreturn__));
+
+void _exit(int status)
+{
+#ifdef __USING_MCFGTHREAD__
+  __MCF__Exit(status);
+#else
+  (*__MINGW_IMP_SYMBOL(_exit))(status);
+#endif
+}
+
+#ifdef __USING_MCFGTHREAD__
+/* `at_quick_exit()`, C99  */
+typedef void (__cdecl *_PVFV)(void);
+int at_quick_exit(_PVFV func);
+
+typedef void* HANDLE;
+extern HANDLE __dso_handle;
+
+int at_quick_exit(_PVFV func)
+{
+  return __MCF_cxa_at_quick_exit ((__MCF_cxa_dtor_cdecl*)(intptr_t) func, NULL, &__dso_handle);
+}
+#endif  /* __USING_MCFGTHREAD__  */
diff --git a/mingw-w64-crt/crt/tls_atexit.c b/mingw-w64-crt/crt/tls_atexit.c
index 60c4f513e..f7614f15d 100644
--- a/mingw-w64-crt/crt/tls_atexit.c
+++ b/mingw-w64-crt/crt/tls_atexit.c
@@ -4,6 +4,29 @@
  * No warranty is given; refer to the file DISCLAIMER.PD within this package.
  */
 
+typedef void (__thiscall * dtor_fn)(void*);
+int __mingw_cxa_atexit(dtor_fn dtor, void *obj, void *dso);
+int __mingw_cxa_thread_atexit(dtor_fn dtor, void *obj, void *dso);
+
+/* This is the per-module DSO handle as required by Itanium ABI.  */
+void* __dso_handle;
+
+#ifdef __USING_MCFGTHREAD__
+
+#include <mcfgthread/cxa.h>
+
+int __mingw_cxa_atexit(dtor_fn dtor, void *obj, void *dso)
+{
+  return __MCF_cxa_atexit(dtor, obj, dso);
+}
+
+int __mingw_cxa_thread_atexit(dtor_fn dtor, void *obj, void *dso)
+{
+  return __MCF_cxa_thread_atexit(dtor, obj, dso);
+}
+
+#else  /* __USING_MCFGTHREAD__  */
+
 #include <sect_attribs.h>
 
 #ifndef WIN32_LEAN_AND_MEAN
@@ -18,10 +41,6 @@
 #include <process.h>
 
 
-typedef void (__thiscall * dtor_fn)(void*);
-int __mingw_cxa_atexit(dtor_fn dtor, void *obj, void *dso);
-int __mingw_cxa_thread_atexit(dtor_fn dtor, void *obj, void *dso);
-
 typedef struct dtor_obj dtor_obj;
 struct dtor_obj {
   dtor_fn dtor;
@@ -29,7 +48,6 @@ struct dtor_obj {
   dtor_obj *next;
 };
 
-HANDLE __dso_handle;
 extern char __mingw_module_is_dll;
 
 static CRITICAL_SECTION lock;
@@ -170,3 +188,5 @@ static void WINAPI tls_callback(HANDLE hDllHandle, DWORD dwReason, LPVOID __UNUS
 }
 
 _CRTALLOC(".CRT$XLB") PIMAGE_TLS_CALLBACK __xl_b = tls_callback;
+
+#endif  /* __USING_MCFGTHREAD__  */
diff --git a/mingw-w64-crt/crt/ucrt_exit_wrappers.c b/mingw-w64-crt/crt/ucrt_exit_wrappers.c
new file mode 100644
index 000000000..10611ac88
--- /dev/null
+++ b/mingw-w64-crt/crt/ucrt_exit_wrappers.c
@@ -0,0 +1,38 @@
+/**
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER.PD within this package.
+ */
+
+#undef __MSVCRT_VERSION__
+#define _UCRT
+#include <_mingw.h>
+#ifdef __USING_MCFGTHREAD__
+#include <mcfgthread/exit.h>
+#endif
+
+/* `quick_exit()`, C99  */
+void quick_exit(int status) __attribute__((__noreturn__));
+extern void (*__MINGW_IMP_SYMBOL(quick_exit))(int) __attribute__((__noreturn__));
+
+void quick_exit(int status)
+{
+#ifdef __USING_MCFGTHREAD__
+  __MCF_quick_exit(status);
+#else
+  (*__MINGW_IMP_SYMBOL(quick_exit))(status);
+#endif
+}
+
+/* `_Exit()`, C99  */
+void _Exit(int status) __attribute__((__noreturn__));
+extern void (*__MINGW_IMP_SYMBOL(_Exit))(int) __attribute__((__noreturn__));
+
+void _Exit(int status)
+{
+#ifdef __USING_MCFGTHREAD__
+  __MCF__Exit(status);
+#else
+  (*__MINGW_IMP_SYMBOL(_Exit))(status);
+#endif
+}
diff --git a/mingw-w64-crt/lib-common/api-ms-win-crt-runtime-l1-1-0.def.in b/mingw-w64-crt/lib-common/api-ms-win-crt-runtime-l1-1-0.def.in
index ea310d426..33e4f5504 100644
--- a/mingw-w64-crt/lib-common/api-ms-win-crt-runtime-l1-1-0.def.in
+++ b/mingw-w64-crt/lib-common/api-ms-win-crt-runtime-l1-1-0.def.in
@@ -4,7 +4,7 @@ EXPORTS
 
 #include "func.def.in"
 
-_Exit
+_Exit DATA
 F_I386(__control87_2)
 __doserrno
 __fpe_flt_rounds
@@ -42,7 +42,7 @@ _endthread
 _endthreadex
 _errno
 _execute_onexit_table
-_exit
+_exit DATA
 F_NON_I386(_fpieee_flt)
 ; DATA added manually
 _fpreset DATA
@@ -96,7 +96,7 @@ _wcserror_s
 _wperror
 _wsystem
 abort
-exit
+exit DATA
 ; Don't use the float env functions from UCRT; fesetround doesn't seem to have
 ; any effect on the FPU control word as required by other libmingwex math
 ; routines.
@@ -110,7 +110,7 @@ fesetexceptflag DATA
 fesetround DATA
 fetestexcept DATA
 perror
-quick_exit
+quick_exit DATA
 raise
 set_terminate
 signal
diff --git a/mingw-w64-crt/lib-common/msvcr120_app.def.in b/mingw-w64-crt/lib-common/msvcr120_app.def.in
index 48f3df0cd..de65af76e 100644
--- a/mingw-w64-crt/lib-common/msvcr120_app.def.in
+++ b/mingw-w64-crt/lib-common/msvcr120_app.def.in
@@ -1243,7 +1243,7 @@ F_I386(_except1)
 F_I386(_except_handler2)
 F_I386(_except_handler3)
 F_I386(_except_handler4_common)
-_exit
+_exit DATA
 _exit_app
 _expand
 _fclose_nolock
@@ -1970,7 +1970,7 @@ erfcf
 F_ARM32(erfcl) ; Can't use long double functions from the CRT on x86
 erff
 F_ARM32(erfl) ; Can't use long double functions from the CRT on x86
-exit
+exit DATA
 exp
 exp2
 exp2f
diff --git a/mingw-w64-crt/lib-common/msvcrt.def.in b/mingw-w64-crt/lib-common/msvcrt.def.in
index fe2bf2526..e1f17e09b 100644
--- a/mingw-w64-crt/lib-common/msvcrt.def.in
+++ b/mingw-w64-crt/lib-common/msvcrt.def.in
@@ -578,7 +578,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fcloseall
 _fcvt
@@ -951,7 +951,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp F_X86_ANY(DATA)
 fabs DATA
 fclose
diff --git a/mingw-w64-crt/lib-common/ucrtbase-common.def.in b/mingw-w64-crt/lib-common/ucrtbase-common.def.in
index 69052d686..086b7cca0 100644
--- a/mingw-w64-crt/lib-common/ucrtbase-common.def.in
+++ b/mingw-w64-crt/lib-common/ucrtbase-common.def.in
@@ -60,7 +60,7 @@ F_DEBUG(_CrtSetReportMode)
 F_I386(_CxxThrowException@8)
 F_NON_I386(_CxxThrowException)
 F_I386(_EH_prolog)
-_Exit
+_Exit DATA
 _FCbuild
 _FCmulcc
 _FCmulcr
@@ -345,7 +345,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 F_DEBUG(_expand_dbg)
 _fclose_nolock
@@ -2328,7 +2328,7 @@ erfcf
 F_ARM_ANY(erfcl) ; Can't use long double functions from the CRT on x86
 erff
 F_ARM_ANY(erfl) ; Can't use long double functions from the CRT on x86
-exit
+exit DATA
 exp
 exp2
 exp2f
@@ -2518,7 +2518,7 @@ putwc
 putwchar
 qsort
 qsort_s
-quick_exit
+quick_exit DATA
 raise
 rand
 rand_s
diff --git a/mingw-w64-crt/lib32/crtdll.def.in b/mingw-w64-crt/lib32/crtdll.def.in
index f5a2939db..5ec749943 100644
--- a/mingw-w64-crt/lib32/crtdll.def.in
+++ b/mingw-w64-crt/lib32/crtdll.def.in
@@ -167,7 +167,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fcloseall
 _fcvt
@@ -447,7 +447,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp DATA
 fabs DATA
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr100.def.in b/mingw-w64-crt/lib32/msvcr100.def.in
index a7646f588..294c790dd 100644
--- a/mingw-w64-crt/lib32/msvcr100.def.in
+++ b/mingw-w64-crt/lib32/msvcr100.def.in
@@ -830,7 +830,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1672,7 +1672,7 @@ cos DATA
 ; If we implement cosh too, we can set it to DATA only.
 cosh
 div
-exit
+exit DATA
 exp DATA
 fabs DATA
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr100d.def.in b/mingw-w64-crt/lib32/msvcr100d.def.in
index 0a54d464e..35dacc2cb 100644
--- a/mingw-w64-crt/lib32/msvcr100d.def.in
+++ b/mingw-w64-crt/lib32/msvcr100d.def.in
@@ -883,7 +883,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1738,7 +1738,7 @@ clock
 cos DATA ; overwritten
 cosh
 div
-exit
+exit DATA
 exp DATA ; overwritten
 fabs DATA ; overwritten
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr110.def.in b/mingw-w64-crt/lib32/msvcr110.def.in
index a041054ce..963ce4d32 100644
--- a/mingw-w64-crt/lib32/msvcr110.def.in
+++ b/mingw-w64-crt/lib32/msvcr110.def.in
@@ -953,7 +953,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1804,7 +1804,7 @@ clock
 cos DATA
 cosh ; If we implement cosh, we can set it to DATA only.
 div
-exit
+exit DATA
 exp DATA
 fabs DATA
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr110d.def.in b/mingw-w64-crt/lib32/msvcr110d.def.in
index a0d385785..74d489e5f 100644
--- a/mingw-w64-crt/lib32/msvcr110d.def.in
+++ b/mingw-w64-crt/lib32/msvcr110d.def.in
@@ -1006,7 +1006,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1871,7 +1871,7 @@ clock
 cos DATA ; overwritten
 cosh
 div
-exit
+exit DATA
 exp DATA ; overwritten
 fabs DATA ; overwritten
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr120.def.in b/mingw-w64-crt/lib32/msvcr120.def.in
index 2551b3062..7daaed030 100644
--- a/mingw-w64-crt/lib32/msvcr120.def.in
+++ b/mingw-w64-crt/lib32/msvcr120.def.in
@@ -972,7 +972,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1943,7 +1943,7 @@ erfcf
 ; erfcl ; Can't use long double functions from the CRT on x86
 erff
 ; erfl ; Can't use long double functions from the CRT on x86
-exit
+exit DATA
 exp
 exp2
 exp2f
diff --git a/mingw-w64-crt/lib32/msvcr120d.def.in b/mingw-w64-crt/lib32/msvcr120d.def.in
index d8272600f..e2f34ca45 100644
--- a/mingw-w64-crt/lib32/msvcr120d.def.in
+++ b/mingw-w64-crt/lib32/msvcr120d.def.in
@@ -1025,7 +1025,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -2010,7 +2010,7 @@ erfcf
 ; erfcl ; Can't use long double functions from the CRT on x86
 erff
 ; erfl ; Can't use long double functions from the CRT on x86
-exit
+exit DATA
 exp
 exp2
 exp2f
diff --git a/mingw-w64-crt/lib32/msvcr40d.def.in b/mingw-w64-crt/lib32/msvcr40d.def.in
index 5d1372e1e..b053c8189 100644
--- a/mingw-w64-crt/lib32/msvcr40d.def.in
+++ b/mingw-w64-crt/lib32/msvcr40d.def.in
@@ -1126,7 +1126,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fcloseall
@@ -1475,7 +1475,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr70.def.in b/mingw-w64-crt/lib32/msvcr70.def.in
index 91ae74a6c..4c1839dcb 100644
--- a/mingw-w64-crt/lib32/msvcr70.def.in
+++ b/mingw-w64-crt/lib32/msvcr70.def.in
@@ -314,7 +314,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fcloseall
 _fcvt
@@ -725,7 +725,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr70d.def.in b/mingw-w64-crt/lib32/msvcr70d.def.in
index 0016d3620..cd3cbd3bc 100644
--- a/mingw-w64-crt/lib32/msvcr70d.def.in
+++ b/mingw-w64-crt/lib32/msvcr70d.def.in
@@ -353,7 +353,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fcloseall
@@ -769,7 +769,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr71.def.in b/mingw-w64-crt/lib32/msvcr71.def.in
index a130a77b0..bd6c4c618 100644
--- a/mingw-w64-crt/lib32/msvcr71.def.in
+++ b/mingw-w64-crt/lib32/msvcr71.def.in
@@ -306,7 +306,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fcloseall
 _fcvt
@@ -719,7 +719,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr71d.def.in b/mingw-w64-crt/lib32/msvcr71d.def.in
index 7ad3b594f..edb4792d4 100644
--- a/mingw-w64-crt/lib32/msvcr71d.def.in
+++ b/mingw-w64-crt/lib32/msvcr71d.def.in
@@ -345,7 +345,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fcloseall
@@ -763,7 +763,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr80.def.in b/mingw-w64-crt/lib32/msvcr80.def.in
index f15ea5d3f..1fa4cbbb1 100644
--- a/mingw-w64-crt/lib32/msvcr80.def.in
+++ b/mingw-w64-crt/lib32/msvcr80.def.in
@@ -457,7 +457,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1312,7 +1312,7 @@ clock
 cos DATA
 cosh ; If we implement cosh, we can set it to DATA only.
 div
-exit
+exit DATA
 exp DATA
 fabs DATA
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr80d.def.in b/mingw-w64-crt/lib32/msvcr80d.def.in
index 3340a189a..097f85fca 100644
--- a/mingw-w64-crt/lib32/msvcr80d.def.in
+++ b/mingw-w64-crt/lib32/msvcr80d.def.in
@@ -524,7 +524,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1395,7 +1395,7 @@ clock
 cos DATA ; overwritten
 cosh
 div
-exit
+exit DATA
 exp DATA ; overwritten
 fabs DATA ; overwritten
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr90.def.in b/mingw-w64-crt/lib32/msvcr90.def.in
index cf15aa62f..8912c396b 100644
--- a/mingw-w64-crt/lib32/msvcr90.def.in
+++ b/mingw-w64-crt/lib32/msvcr90.def.in
@@ -457,7 +457,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1306,7 +1306,7 @@ cos DATA
 ; If we have cosh implementation, we can set it to DATA only.
 cosh
 div
-exit
+exit DATA
 exp DATA
 fabs DATA
 fclose
diff --git a/mingw-w64-crt/lib32/msvcr90d.def.in b/mingw-w64-crt/lib32/msvcr90d.def.in
index 3267aa2e7..49dc3dcca 100644
--- a/mingw-w64-crt/lib32/msvcr90d.def.in
+++ b/mingw-w64-crt/lib32/msvcr90d.def.in
@@ -514,7 +514,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1378,7 +1378,7 @@ cos DATA
 ; If we implement cosh too, we can set it to DATA only.
 cosh
 div
-exit
+exit DATA
 exp DATA
 fabs DATA
 fclose
diff --git a/mingw-w64-crt/lib32/msvcrt10.def.in b/mingw-w64-crt/lib32/msvcrt10.def.in
index c5ec60458..415694f1c 100644
--- a/mingw-w64-crt/lib32/msvcrt10.def.in
+++ b/mingw-w64-crt/lib32/msvcrt10.def.in
@@ -943,7 +943,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fcloseall
 _fcvt
@@ -1126,7 +1126,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib32/msvcrt20.def.in b/mingw-w64-crt/lib32/msvcrt20.def.in
index 9fc9f8ed8..96720cb12 100644
--- a/mingw-w64-crt/lib32/msvcrt20.def.in
+++ b/mingw-w64-crt/lib32/msvcrt20.def.in
@@ -981,7 +981,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fcloseall
 _fcvt
@@ -1343,7 +1343,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib32/msvcrt40.def.in b/mingw-w64-crt/lib32/msvcrt40.def.in
index 1a9cbc210..b0c7b9230 100644
--- a/mingw-w64-crt/lib32/msvcrt40.def.in
+++ b/mingw-w64-crt/lib32/msvcrt40.def.in
@@ -1099,7 +1099,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fcloseall
 _fcvt
@@ -1443,7 +1443,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib32/msvcrtd.def.in b/mingw-w64-crt/lib32/msvcrtd.def.in
index c54c9a9a9..a983db7cd 100644
--- a/mingw-w64-crt/lib32/msvcrtd.def.in
+++ b/mingw-w64-crt/lib32/msvcrtd.def.in
@@ -291,7 +291,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fcloseall
@@ -669,7 +669,7 @@ cosh
 ctime
 difftime
 div
-exit
+exit DATA
 exp
 fabs
 fclose
diff --git a/mingw-w64-crt/lib64/msvcr100.def.in b/mingw-w64-crt/lib64/msvcr100.def.in
index af3beefbd..92e9e1cc5 100644
--- a/mingw-w64-crt/lib64/msvcr100.def.in
+++ b/mingw-w64-crt/lib64/msvcr100.def.in
@@ -784,7 +784,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1624,7 +1624,7 @@ cosf DATA
 cosh
 coshf DATA
 div
-exit
+exit DATA
 exp DATA
 expf DATA
 fabs DATA
diff --git a/mingw-w64-crt/lib64/msvcr100d.def.in b/mingw-w64-crt/lib64/msvcr100d.def.in
index b8b54ee10..ed1f9f664 100644
--- a/mingw-w64-crt/lib64/msvcr100d.def.in
+++ b/mingw-w64-crt/lib64/msvcr100d.def.in
@@ -835,7 +835,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1689,7 +1689,7 @@ cosf DATA ; overwritten
 cosh
 coshf DATA ; overwritten
 div
-exit
+exit DATA
 exp DATA ; overwritten
 expf DATA ; overwritten
 fabs DATA ; overwritten
diff --git a/mingw-w64-crt/lib64/msvcr110.def.in b/mingw-w64-crt/lib64/msvcr110.def.in
index e39f93ee9..a2c34e6ab 100644
--- a/mingw-w64-crt/lib64/msvcr110.def.in
+++ b/mingw-w64-crt/lib64/msvcr110.def.in
@@ -909,7 +909,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1748,7 +1748,7 @@ cosf
 cosh
 coshf
 div
-exit
+exit DATA
 exp
 expf
 fabs
diff --git a/mingw-w64-crt/lib64/msvcr110d.def.in b/mingw-w64-crt/lib64/msvcr110d.def.in
index dfcd60360..d668cede2 100644
--- a/mingw-w64-crt/lib64/msvcr110d.def.in
+++ b/mingw-w64-crt/lib64/msvcr110d.def.in
@@ -960,7 +960,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1813,7 +1813,7 @@ cosf
 cosh
 coshf
 div
-exit
+exit DATA
 exp
 expf
 fabs
diff --git a/mingw-w64-crt/lib64/msvcr120.def.in b/mingw-w64-crt/lib64/msvcr120.def.in
index 3f517eb58..3f73f3604 100644
--- a/mingw-w64-crt/lib64/msvcr120.def.in
+++ b/mingw-w64-crt/lib64/msvcr120.def.in
@@ -926,7 +926,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1888,7 +1888,7 @@ erfcf
 ; erfcl ; Can't use long double functions from the CRT on x86
 erff
 ; erfl ; Can't use long double functions from the CRT on x86
-exit
+exit DATA
 exp
 exp2
 exp2f
diff --git a/mingw-w64-crt/lib64/msvcr120d.def.in b/mingw-w64-crt/lib64/msvcr120d.def.in
index 364cc1fb2..599cd6226 100644
--- a/mingw-w64-crt/lib64/msvcr120d.def.in
+++ b/mingw-w64-crt/lib64/msvcr120d.def.in
@@ -977,7 +977,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1953,7 +1953,7 @@ erfcf
 ; erfcl ; Can't use long double functions from the CRT on x86
 erff
 ; erfl ; Can't use long double functions from the CRT on x86
-exit
+exit DATA
 exp
 exp2
 exp2f
diff --git a/mingw-w64-crt/lib64/msvcr80.def.in b/mingw-w64-crt/lib64/msvcr80.def.in
index a5690aab7..00e968587 100644
--- a/mingw-w64-crt/lib64/msvcr80.def.in
+++ b/mingw-w64-crt/lib64/msvcr80.def.in
@@ -397,7 +397,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1247,7 +1247,7 @@ cosf
 cosh
 coshf
 div
-exit
+exit DATA
 exp DATA
 expf DATA
 fabs
diff --git a/mingw-w64-crt/lib64/msvcr80d.def.in b/mingw-w64-crt/lib64/msvcr80d.def.in
index e829294dd..394136979 100644
--- a/mingw-w64-crt/lib64/msvcr80d.def.in
+++ b/mingw-w64-crt/lib64/msvcr80d.def.in
@@ -458,7 +458,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1324,7 +1324,7 @@ cosf
 cosh
 coshf
 div
-exit
+exit DATA
 exp DATA ; overwritten
 expf DATA ; overwritten
 fabs
diff --git a/mingw-w64-crt/lib64/msvcr90.def.in b/mingw-w64-crt/lib64/msvcr90.def.in
index 8143378ce..ecd06a979 100644
--- a/mingw-w64-crt/lib64/msvcr90.def.in
+++ b/mingw-w64-crt/lib64/msvcr90.def.in
@@ -401,7 +401,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1244,7 +1244,7 @@ cosf DATA
 cosh
 coshf DATA
 div
-exit
+exit DATA
 exp DATA
 expf DATA
 fabs DATA
diff --git a/mingw-w64-crt/lib64/msvcr90d.def.in b/mingw-w64-crt/lib64/msvcr90d.def.in
index c066bebc0..de07dc0bc 100644
--- a/mingw-w64-crt/lib64/msvcr90d.def.in
+++ b/mingw-w64-crt/lib64/msvcr90d.def.in
@@ -452,7 +452,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1310,7 +1310,7 @@ cosf
 cosh
 coshf
 div
-exit
+exit DATA
 exp DATA
 expf DATA
 fabs
diff --git a/mingw-w64-crt/libarm32/kernelbase.def b/mingw-w64-crt/libarm32/kernelbase.def
index 90c91ab2b..2c72a5faf 100644
--- a/mingw-w64-crt/libarm32/kernelbase.def
+++ b/mingw-w64-crt/libarm32/kernelbase.def
@@ -1882,7 +1882,7 @@ __wgetmainargs
 _amsg_exit
 _c_exit
 _cexit
-_exit
+_exit DATA
 _initterm
 _initterm_e
 _invalid_parameter
@@ -1890,7 +1890,7 @@ _onexit
 _purecall
 _time64
 _crt_atexit == atexit ; rename atexit to _crt_atexit for compatibility with UCRT, real atexit function provided by mingw-w64
-exit
+exit DATA
 hgets
 hwprintf
 lstrcmp
diff --git a/mingw-w64-crt/libarm32/msvcr110.def.in b/mingw-w64-crt/libarm32/msvcr110.def.in
index 8bced221e..1edb48e3f 100644
--- a/mingw-w64-crt/libarm32/msvcr110.def.in
+++ b/mingw-w64-crt/libarm32/msvcr110.def.in
@@ -901,7 +901,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1734,7 +1734,7 @@ cosf
 cosh
 coshf
 div
-exit
+exit DATA
 exp
 expf
 fabs
diff --git a/mingw-w64-crt/libarm32/msvcr110d.def.in b/mingw-w64-crt/libarm32/msvcr110d.def.in
index 584bf08d3..13154c140 100644
--- a/mingw-w64-crt/libarm32/msvcr110d.def.in
+++ b/mingw-w64-crt/libarm32/msvcr110d.def.in
@@ -952,7 +952,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1799,7 +1799,7 @@ cosf
 cosh
 coshf
 div
-exit
+exit DATA
 exp
 expf
 fabs
diff --git a/mingw-w64-crt/libarm32/msvcr120.def.in b/mingw-w64-crt/libarm32/msvcr120.def.in
index a9e717d64..0d6b62896 100644
--- a/mingw-w64-crt/libarm32/msvcr120.def.in
+++ b/mingw-w64-crt/libarm32/msvcr120.def.in
@@ -900,7 +900,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _fclose_nolock
 _fcloseall
@@ -1853,7 +1853,7 @@ erfcf
 erfcl
 erff
 erfl
-exit
+exit DATA
 exp
 exp2
 exp2f
diff --git a/mingw-w64-crt/libarm32/msvcr120d.def.in b/mingw-w64-crt/libarm32/msvcr120d.def.in
index b1a4eff7f..f167cd357 100644
--- a/mingw-w64-crt/libarm32/msvcr120d.def.in
+++ b/mingw-w64-crt/libarm32/msvcr120d.def.in
@@ -951,7 +951,7 @@ _execv
 _execve
 _execvp
 _execvpe
-_exit
+_exit DATA
 _expand
 _expand_dbg
 _fclose_nolock
@@ -1918,7 +1918,7 @@ erfcf
 erfcl
 erff
 erfl
-exit
+exit DATA
 exp
 exp2
 exp2f
diff --git a/mingw-w64-crt/misc/ucrt_at_quick_exit.c b/mingw-w64-crt/misc/ucrt_at_quick_exit.c
index 5999552a0..5d3272d2a 100644
--- a/mingw-w64-crt/misc/ucrt_at_quick_exit.c
+++ b/mingw-w64-crt/misc/ucrt_at_quick_exit.c
@@ -12,6 +12,8 @@
 
 extern char __mingw_module_is_dll;
 
+// When using mcfgthread, `at_quick_exit()` is provided in 'exit_wrappers.c'.
+#ifndef __USING_MCFGTHREAD__
 int __cdecl at_quick_exit(void (__cdecl *func)(void))
 {
   // In a DLL, we can't register a function with _crt_at_quick_exit, because
@@ -22,3 +24,4 @@ int __cdecl at_quick_exit(void (__cdecl *func)(void))
   return _crt_at_quick_exit(func);
 }
 int __cdecl (*__MINGW_IMP_SYMBOL(at_quick_exit))(void (__cdecl *)(void)) = at_quick_exit;
+#endif
diff --git a/mingw-w64-crt/misc/ucrt_compat.c b/mingw-w64-crt/misc/ucrt_compat.c
index 7fefae11e..0447f154d 100644
--- a/mingw-w64-crt/misc/ucrt_compat.c
+++ b/mingw-w64-crt/misc/ucrt_compat.c
@@ -35,9 +35,11 @@ unsigned int __cdecl _get_output_format(void);
 int __cdecl __ms_fwprintf(FILE *, const wchar_t *, ...);
 
 
+extern void (*__MINGW_IMP_SYMBOL(_exit))(int) __attribute__((__noreturn__));
+
 void __cdecl __MINGW_ATTRIB_NORETURN _amsg_exit(int ret) {
   fprintf(stderr, "runtime error %d\n", ret);
-  _exit(255);
+  (*__MINGW_IMP_SYMBOL(_exit))(255);
 }
 
 unsigned int __cdecl _get_output_format(void)
-- 
2.46.0

